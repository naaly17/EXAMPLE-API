{
	"openapi": "3.0.0",
	"info": {
		"title": "CART API",
		"description": "OpenAPI documentation for managing the CART database. Developed by [Intelligent Decision Systems Inc.](http://www.idsi.com)",
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "https://cart.idsi.com/CARTAPI/"
		}
	],
	"paths": {
		"/deleteform/{orbRef}": {
			"delete": {
				"summary": "Delete a document within Orbeon and remove it from ng_docs",
				"tags": [
					"Document"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/orbRef"
					}
				],
				"responses": {
					"204": {
						"description": "Document successfully deleted"
					},
					"401": {
						"description": "The user was unauthorized to delete this document."
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/duplicate/{orbRef}": {
			"post": {
				"summary": "Duplicate a document within Orbeon and update ng_docs with its reference",
				"tags": [
					"Document"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/orbRef"
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/duplicate"
				},
				"responses": {
					"201": {
						"description": "Newly created Document"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/organization": {
			"get": {
				"summary": "Get a list of organizations",
				"tags": [
					"Organization"
				],
				"responses": {
					"200": {
						"description": "Organizations array",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationList"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"post": {
				"summary": "Post a new organization",
				"tags": [
					"Organization"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/organizationPost"
				},
				"responses": {
					"201": {
						"description": "Newly created item ID",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"example": 1
								}
							}
						}
					},
					"405": {
						"$ref": "#/components/responses/405NoID"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/organization/{OrganizationID}": {
			"get": {
				"summary": "Get a single organization by ID",
				"tags": [
					"Organization"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/organizationID"
					}
				],
				"responses": {
					"200": {
						"description": "Organization object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/organization"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"patch": {
				"summary": "Update an organization entry",
				"tags": [
					"Organization"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/organizationID"
					}
				],
				"responses": {
					"204": {
						"description": "The content has been successfully updated."
					},
					"404": {
						"description": "No organization found"
					},
					"405": {
						"$ref": "#/components/responses/405NoID"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"delete": {
				"summary": "Delete an organization entry",
				"tags": [
					"Organization"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/organizationID"
					}
				],
				"responses": {
					"204": {
						"description": "The organization was successfully deleted."
					},
					"404": {
						"description": "No organization found"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/group": {
			"get": {
				"summary": "Lists all groups",
				"tags": [
					"Group"
				],
				"responses": {
					"200": {
						"description": "Group objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GroupList"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"post": {
				"summary": "Post a new Group object",
				"tags": [
					"Group"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/groupPost"
				},
				"responses": {
					"200": {
						"description": "New group object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"405": {
						"$ref": "#/components/responses/405NoID"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/group/{groupID}": {
			"get": {
				"summary": "Gets a single Group object",
				"tags": [
					"Group"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/groupID"
					}
				],
				"responses": {
					"200": {
						"description": "Group object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"patch": {
				"summary": "Edit a single Group object",
				"tags": [
					"Group"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/groupID"
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/groupPatch"
				},
				"responses": {
					"204": {
						"$ref": "#/components/responses/204"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"delete": {
				"summary": "Delete a single Group object",
				"tags": [
					"Group"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/groupID"
					}
				],
				"responses": {
					"204": {
						"$ref": "#/components/responses/204Deleted"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/tag": {
			"get": {
				"summary": "Lists all tags",
				"tags": [
					"Tag"
				],
				"responses": {
					"200": {
						"description": "Tag objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TagList"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"post": {
				"summary": "Posts a new Tag object",
				"tags": [
					"Tag"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/tagPost"
				},
				"responses": {
					"201": {
						"description": "Newly created item ID",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"example": 1
								}
							}
						}
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/tag/{tagID}": {
			"get": {
				"summary": "Get a single tag object by its ID",
				"tags": [
					"Tag"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/tagID"
					}
				],
				"responses": {
					"200": {
						"description": "Tag objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Tag"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"patch": {
				"summary": "Edit a single Tag object's name",
				"tags": [
					"Tag"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/tagID"
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/tagPatch"
				},
				"responses": {
					"204": {
						"$ref": "#/components/responses/204"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/template": {
			"get": {
				"summary": "Lists all templates",
				"tags": [
					"Template"
				],
				"responses": {
					"200": {
						"description": "Template objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TemplateList"
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user": {
			"get": {
				"summary": "Lists all users",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "Starting index of database results to return; defaults to 0",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"description": "Maximum number of results to return; defaults to 500",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of user objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/userList"
								}
							}
						}
					},
					"404": {
						"description": "No users found"
					},
					"405": {
						"$ref": "#/components/responses/405NoID"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			},
			"post": {
				"summary": "Post a new user",
				"tags": [
					"User"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/userPost"
				},
				"responses": {
					"201": {
						"description": "New created organization ID",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"example": 1
								}
							}
						}
					},
					"404": {
						"description": "No organization found"
					},
					"405": {
						"$ref": "#/components/responses/405NoID"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user/{userID}": {
			"patch": {
				"summary": "Modify user ID",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/userID"
					}
				],
				"responses": {
					"204": {
						"$ref": "#/components/responses/204"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"405": {
						"$ref": "#/components/responses/405"
					},
					"415": {
						"$ref": "#/components/responses/415"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				},
				"requestBody": {
					"$ref": "#/components/requestBodies/userPatch"
				}
			}
		},
		"/user/login/": {
			"post": {
				"summary": "Login User",
				"tags": [
					"User"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/userPostLogin"
				},
				"responses": {
					"400": {
						"description": "Invalid Email/Password or User is Inactive"
					},
					"401": {
						"description": "Invalid JSON, missing username or password"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user/login/refresh": {
			"post": {
				"summary": "Refresh access token",
				"tags": [
					"User"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/userRefresh"
				},
				"responses": {
					"400": {
						"description": "Invalid JSON, missing refresh token (key, value)"
					},
					"401": {
						"description": "Invalid refresh token"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user/logout": {
			"get": {
				"summary": "Logout user by revoking access token",
				"tags": [
					"User"
				],
				"parameters": [
					{
						"name": "refresh_token",
						"description": "refresh token to be revoked",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Successfully revoked access token"
					},
					"400": {
						"description": "refresh token parameter not passed through"
					},
					"401": {
						"description": "Invalid refresh token"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user/reset": {
			"post": {
				"summary": "Send email with temporary token to reset password",
				"tags": [
					"User"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/userReset"
				},
				"responses": {
					"400": {
						"description": "Invalid JSON, missing email"
					},
					"401": {
						"description": "Invalid email"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/user/validate/email": {
			"post": {
				"summary": "Returns true if email does not already exist in databse, false otherwise",
				"tags": [
					"User"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/userValidateEmail"
				},
				"responses": {
					"400": {
						"description": "Invalid JSON, missing email"
					},
					"401": {
						"description": "Invalid email"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		},
		"/search/organization": {
			"get": {
				"summary": "Lists organization objects",
				"tags": [
					"Search"
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/offset"
					},
					{
						"$ref": "#/components/parameters/limit"
					},
					{
						"name": "name",
						"description": "A string to search for within organization names",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of organization objects",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationList"
								}
							}
						}
					},
					"404": {
						"description": "No organizations found"
					},
					"500": {
						"$ref": "#/components/responses/500"
					},
					"503": {
						"$ref": "#/components/responses/503"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"duplicate": {
				"description": "User property must be an ID of an existing user in ng_users",
				"type": "object",
				"properties": {
					"user": {
						"type": "integer"
					},
					"title": {
						"type": "string"
					}
				},
				"example": {
					"user": 1,
					"title": "New Title"
				}
			},
			"TagList": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Tag"
				},
				"example": [
					{
						"id": 1,
						"name": "FIRES",
						"count": 10
					},
					{
						"id": 1,
						"name": "OEC",
						"count": 11
					}
				]
			},
			"Tag": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"count": {
						"type": "integer"
					}
				},
				"example": {
					"id": 1,
					"name": "FIRES",
					"count": 10
				}
			},
			"tagPatch": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"example": {
					"name": "New Tag Name"
				}
			},
			"TemplateList": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Template"
				}
			},
			"GroupList": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Group"
				},
				"example": [
					{
						"id": 1,
						"name": "First Group",
						"owner": {
							"id": 1,
							"name": "John Smith",
							"email": "email@gmail.com",
							"role": 1,
							"phone": "555-555-5555"
						}
					},
					{
						"id": 2,
						"name": "Second Group",
						"owner": {
							"id": 1,
							"name": "John Smith",
							"email": "email@gmail.com",
							"role": 1,
							"phone": "555-555-5555"
						}
					}
				]
			},
			"Group": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"owner": {
						"$ref": "#/components/schemas/userPublic"
					}
				},
				"example": {
					"id": 1,
					"name": "Test Group",
					"owner": {
						"id": 1,
						"name": "John Smith",
						"email": "email@gmail.com",
						"role": 1,
						"phone": "555-555-5555"
					}
				}
			},
			"GroupPost": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"owner_id": {
						"type": "integer"
					}
				},
				"example": {
					"name": "Test Post Group",
					"owner_id": 1
				}
			},
			"GroupPatch": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"owner_id": {
						"type": "integer"
					},
					"add": {
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					"delete": {
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				},
				"example": {
					"name": "Modified Name",
					"owner_id": 3,
					"add": [
						5
					],
					"delete": [
						6
					]
				}
			},
			"Template": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"app": {
						"type": "string"
					},
					"form": {
						"type": "string"
					},
					"title": {
						"type": "string"
					}
				},
				"example": {
					"id": 1,
					"app": "TestApp",
					"form": "TestForm",
					"title": "Test Title"
				}
			},
			"IDList": {
				"type": "array",
				"items": {
					"type": "integer"
				},
				"example": {
					"-21": 40,
					"-22": 41
				}
			},
			"OrganizationList": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/organization"
				},
				"example": [
					{
						"id": 1,
						"name": "TEST ORGANIZATION 1"
					},
					{
						"id": 2,
						"name": "TEST ORGANIZATION 2"
					},
					{
						"id": 3,
						"name": "TEST ORGANIZATION 3"
					}
				]
			},
			"organizationPost": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"example": {
					"name": "TEST ORGANIZATION"
				}
			},
			"organization": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"name": {
						"type": "string"
					}
				},
				"example": {
					"id": 1,
					"name": "TEST ORG"
				}
			},
			"userPublic": {
				"type": "object",
				"description": "A version of a user object with sensitive info such as passwords or tokens removed.",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"role": {
						"type": "integer"
					},
					"phone": {
						"type": "string"
					},
					"organization": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							}
						}
					}
				},
				"example": {
					"id": 1,
					"name": "John Smith",
					"email": "email@gmail.com",
					"role": 1,
					"phone": "555-555-5555",
					"organization": {
						"id": 3,
						"name": "IDSI"
					}
				}
			},
			"user": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"new_password": {
						"type": "string"
					},
					"role": {
						"type": "integer"
					}
				},
				"example": {
					"id": 1,
					"email": "email@gmail.com",
					"full_name": "John Smith",
					"password": "password",
					"new_password": "new_password",
					"role": 1
				}
			},
			"userLogin": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"example": {
					"email": "email@gmail.com",
					"password": "password"
				}
			},
			"userRefresh": {
				"type": "object",
				"properties": {
					"refresh_token": {
						"type": "string"
					}
				},
				"example": {
					"refresh_token": "aifiae84j2kq02l391lama984jenrua8w0w98wu2"
				}
			},
			"userReset": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"example": {
					"email": "email@gmail.com"
				}
			},
			"userPatch": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"email": {
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"role": {
						"type": "integer"
					},
					"active": {
						"type": "integer"
					}
				},
				"example": {
					"id": 1,
					"email": "email@gmail.com",
					"full_name": "John Smith",
					"role": 1,
					"active": 1
				}
			},
			"userList": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/user"
				},
				"example": [
					{
						"id": 1,
						"name": "John Smith",
						"email": "email@gmail.com",
						"role": 1,
						"phone": "555-555-5555",
						"organization": {
							"id": 1,
							"name": "TEST ORGANIZATION 1"
						}
					},
					{
						"id": 2,
						"name": "Sarah White",
						"email": "email@email.com",
						"role": 2,
						"phone": "555-555-5555",
						"organization": {
							"id": 1,
							"name": "TEST ORGANIZATION 2"
						}
					}
				]
			},
			"HashID": {
				"type": "object",
				"additionalProperties": {
					"type": "integer",
					"description": "Used for client-server syncing inserted items: key is original client ID, value is new server ID"
				},
				"example": {
					"-1": 0,
					"-5": 1,
					"-7": 2
				}
			}
		},
		"parameters": {
			"orbRef": {
				"name": "orbRef",
				"in": "path",
				"description": "A string that Orbeon uses to identify documents",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"tagID": {
				"name": "tagID",
				"in": "path",
				"description": "Unique identifier for a Tag",
				"required": true,
				"schema": {
					"type": "integer"
				}
			},
			"groupID": {
				"name": "groupID",
				"in": "path",
				"description": "Unique identifier for a group",
				"required": true,
				"schema": {
					"type": "integer"
				}
			},
			"userID": {
				"name": "userID",
				"in": "path",
				"description": "Unique identifier for a user",
				"required": true,
				"schema": {
					"type": "integer"
				}
			},
			"organizationID": {
				"name": "OrganizationID",
				"in": "path",
				"description": "Unique identifier for an organization",
				"required": true,
				"schema": {
					"type": "integer"
				}
			},
			"limit": {
				"name": "Limit",
				"in": "query",
				"description": "An integer specifying the maximum number of results from the server",
				"required": false,
				"schema": {
					"type": "integer"
				}
			},
			"offset": {
				"name": "Offset",
				"in": "query",
				"description": "An integer specifying the number of rows to skip when getting results from the server",
				"required": false,
				"schema": {
					"type": "integer"
				}
			}
		},
		"requestBodies": {
			"duplicate": {
				"description": "Duplicate Orbeon document request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/duplicate"
						}
					}
				}
			},
			"tagPatch": {
				"description": "Tag PATCH request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/tagPatch"
						}
					}
				}
			},
			"groupPatch": {
				"description": "Group PATCH request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/GroupPatch"
						}
					}
				}
			},
			"tagPost": {
				"description": "Tag POST request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Tag"
						}
					}
				}
			},
			"groupPost": {
				"description": "Group POST request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/GroupPost"
						}
					}
				}
			},
			"userPost": {
				"description": "User POST request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/user"
						}
					}
				},
				"required": true
			},
			"userPostLogin": {
				"description": "User POST login request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/userLogin"
						}
					}
				},
				"required": true
			},
			"userPatch": {
				"description": "User Patch request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/userPatch"
						}
					}
				},
				"required": true
			},
			"userRefresh": {
				"description": "Refresh access token post request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/userRefresh"
						}
					}
				}
			},
			"userValidateEmail": {
				"description": "post endpoint, returns true if email does not already exist in databse, false otherwise",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/userReset"
						}
					}
				}
			},
			"userReset": {
				"description": "post endpoint, sends an email with a temporary reset token value valid for 24 hours",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/userReset"
						}
					}
				},
				"required": true
			},
			"organizationPost": {
				"description": "Organization POST request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/organization"
						}
					}
				},
				"required": true
			},
			"organizationPatch": {
				"description": "Organization PATCH request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/organization"
						}
					}
				},
				"required": true
			}
		},
		"headers": {
			"Allow": {
				"description": "Allowed HTTP methods",
				"schema": {
					"type": "string"
				}
			},
			"Accept": {
				"description": "Accepted media type",
				"schema": {
					"type": "string"
				}
			}
		},
		"responses": {
			"204Deleted": {
				"description": "item successfully deleted"
			},
			"204": {
				"description": "item successfully modified"
			},
			"400": {
				"description": "ID provided in request body does not match path ID"
			},
			"404": {
				"description": "No item found"
			},
			"415": {
				"description": "Request body must be application/json",
				"headers": {
					"Accept": {
						"$ref": "#/components/headers/Accept"
					}
				}
			},
			"500": {
				"description": "Database error",
				"content": {
					"application/json": {
						"schema": {
							"type": "string",
							"example": "Database error message"
						}
					}
				}
			},
			"503": {
				"description": "Database connection error",
				"content": {
					"application/json": {
						"schema": {
							"type": "string",
							"example": "database connection error"
						}
					}
				}
			},
			"405NoID": {
				"description": "No ID was provided for this endpoint",
				"headers": {
					"Allow": {
						"$ref": "#/components/headers/Allow"
					}
				}
			},
			"405ID": {
				"description": "Only GET, DELETE and PATCH methods allowed",
				"headers": {
					"Allow": {
						"$ref": "#/components/headers/Allow"
					}
				}
			},
			"405": {
				"description": "Method not allowed",
				"headers": {
					"Allow": {
						"$ref": "#/components/headers/Allow"
					}
				}
			}
		}
	}
}